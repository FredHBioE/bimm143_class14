knitr::opts_chunk$set(echo = TRUE)
counts <- read.csv("airway_scaledcounts.csv", stringsAsFactors = FALSE)
metadata <-  read.csv("airway_metadata.csv", stringsAsFactors = FALSE)
View(counts)
View(metadata)
colnames(counts) == metadata$id
all(colnames(counts) == metadata$id)
counts <- read.csv("airway_scaledcounts.csv", stringsAsFactors = FALSE)
metadata <-  read.csv("airway_metadata.csv", stringsAsFactors = FALSE)
#all(colnames(counts) == metadata$id)
colnames(counts)
metadata$id
View(counts)
counts <- read.csv("airway_scaledcounts.csv", stringsAsFactors = FALSE)
metadata <-  read.csv("airway_metadata.csv", stringsAsFactors = FALSE)
rownames(counts) <- counts[,1]
View(counts)
View(counts)
counts <- read.csv("airway_scaledcounts.csv", stringsAsFactors = FALSE)
metadata <-  read.csv("airway_metadata.csv", stringsAsFactors = FALSE)
rownames(counts) <- counts[,1]
counts[,1] <- []
counts <- read.csv("airway_scaledcounts.csv", stringsAsFactors = FALSE)
metadata <-  read.csv("airway_metadata.csv", stringsAsFactors = FALSE)
rownames(counts) <- counts[,1]
counts[,1] <- NA
View(counts)
counts <- read.csv("airway_scaledcounts.csv", stringsAsFactors = FALSE)
metadata <-  read.csv("airway_metadata.csv", stringsAsFactors = FALSE)
rownames(counts) <- counts[,1]
counts <- counts[, 2:ncol(counts)]
View(counts)
#all(colnames(counts) == metadata$id)
colnames(counts)
metadata$id
all(colnames(counts) == metadata$id)
#colnames(counts)
#metadata$id
control <- metadata[metadata[,"dex"]=="control",]
control.mean <- rowSums( counts[ ,control$id] )/4
names(control.mean) <- counts$ensgene
View(control)
head(counts[, control$id])
rowSums(counts[, control$id]) / 4
View(metadata)
treated <- metadata[metadata[,"dex"]=="treated",]
treated <- rowSums(counts[ ,treated$id])/length(treated$id)
names(treated) <- counts$ensgene
head(counts[, treated$id])
head(counts[, control$id])
treated <- metadata[metadata[,"dex"]=="treated",]
treated <- rowSums(counts[ ,treated$id])/length(treated$id)
names(treated) <- counts$ensgene
head(counts[, treated$id])
treated <- metadata[metadata[,"dex"]=="treated",]
treated.mean <- rowSums(counts[ ,treated$id])/length(treated$id)
names(treated) <- counts$ensgene
head(counts[, treated$id])
treated <- metadata[metadata[,"dex"]=="treated",]
treated.mean <- rowSums(counts[ ,treated$id])/length(treated$id)
names(treated.mean) <- counts$ensgene
head(counts[, treated$id])
meancounts <- data.frame(control.mean, treated.mean)
colSums(meancounts)
plot(meancounts)
plot(meancounts, log = "xy")
meancounts$log2fc <- log2(meancounts[, "treated.mean"] / meancounts[, "control.mean"])
head(meancounts)
to.rm <- unique(which(meancounts[,1:2] == 0, arr.ind = TRUE)[,1])
mycounts <- meancounts[-to.rm,]
View(treated)
View(mycounts)
mycounts <- meancounts[-to.rm,]
nrow(mycounts)
up.inds <- mycounts$log2fc > 2
up.inds <- mycounts$log2fc > 2
sum(up.inds)
down.inds <- mycounts$log2fc < 2
sum(down.inds)
down.inds <- mycounts$log2fc < -2
sum(down.inds)
head(mycounts[up.inds,])
anno <- read.csv("annotables_grch38.csv")
head(anno)
mycounts.anno <- merge(mycounts, anno, by.x = "row.names", by.y = "ensgene")
View(mycounts.anno)
mycounts.anno <- merge(mycounts, anno, by.x = "row.names", by.y = "ensgene")
mycounts.anno <- merge(mycounts, anno, by.x = "row.names", by.y = "ensgene")
mycounts.anno
View(mycounts)
meancounts <- data.frame(control.mean, treated.mean)
row.names(meancounts) <- row.names(counts)
View(mycounts)
View(counts)
meancounts <- data.frame(control.mean, treated.mean)
row.names(meancounts) <- row.names(counts)
row.names(counts)
meancounts <- data.frame(control.mean, treated.mean)
row.names(meancounts) <- row.names(counts)
row.names(meancounts)
knitr::opts_chunk$set(echo = TRUE)
counts <- read.csv("airway_scaledcounts.csv", stringsAsFactors = FALSE)
metadata <-  read.csv("airway_metadata.csv", stringsAsFactors = FALSE)
rownames(counts) <- counts[,1]
counts <- counts[, 2:ncol(counts)]
all(colnames(counts) == metadata$id)
#colnames(counts)
#metadata$id
control <- metadata[metadata[,"dex"]=="control",]
control.mean <- rowSums(counts[ ,control$id])/length(control$id)
names(control.mean) <- counts$ensgene
head(counts[, control$id])
rowSums(counts[, control$id]) / length(control$id)
treated <- metadata[metadata[,"dex"]=="treated",]
treated.mean <- rowSums(counts[ ,treated$id])/length(treated$id)
names(treated.mean) <- counts$ensgene
head(counts[, treated$id])
meancounts <- data.frame(control.mean, treated.mean)
row.names(meancounts) <- row.names(counts)
colSums(meancounts)
plot(meancounts)
plot(meancounts, log = "xy")
meancounts$log2fc <- log2(meancounts[, "treated.mean"] / meancounts[, "control.mean"])
head(meancounts)
to.rm <- unique(which(meancounts[,1:2] == 0, arr.ind = TRUE)[,1])
mycounts <- meancounts[-to.rm,]
nrow(mycounts)
up.inds <- mycounts$log2fc > 2
sum(up.inds)
down.inds <- mycounts$log2fc < -2
sum(down.inds)
head(mycounts[up.inds,])
anno <- read.csv("annotables_grch38.csv")
head(anno)
mycounts.anno <- merge(mycounts, anno, by.x = "row.names", by.y = "ensgene")
mycounts.anno
library("AnnotationDbi")
library("org.Hs.eg.db")
install.packages("org.Hs.eg.db")
source("https://bioconductor.org/biocLite.R")
BiocInstaller::biocLite("org.Hs.eg.db")
library("AnnotationDbi")
library("org.Hs.eg.db")
columns(org.Hs.eg.db)
mycounts$symbol <- mapIds(org.Hs.eg.db,
keys = row.names(mycounts), # The gene names in our dataset
keytype = "ENSEMBL", # Format of our gene names
column = "SYMBOL") # What new data do we want to add
head(mycounts)
mycounts$entrez <- mapIds(org.Hs.eg.db,
keys = row.names(mycounts),
keytype = "ENSEMBL",
column = "ENTREZID")
head(mycounts)
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=metadata,
design=~dex,
tidy=TRUE)
library(DESeq2)
citation("DESeq2")
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=metadata,
design=~dex,
tidy=TRUE)
counts <- read.csv("airway_scaledcounts.csv", stringsAsFactors = FALSE)
metadata <- read.csv("airway_metadata.csv", stringsAsFactors = FALSE)
library(DESeq2)
citation("DESeq2")
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=metadata,
design=~dex,
tidy=TRUE)
dds
res <- results(dds)
dds <- DESeq(dds)
res <- results(dds)
head(res)
summary(res)
res05 <- results(dds, alpha = 0.05)
summary(res05)
resSig05 <- subset(as.data.frame(res), padj < 0.05)
nrow(resSig05)
ord <- order( resSig01$padj )
x <- c(5,4,1,2)
sort(x)
x <- c(5,4,1,2)
order(x)
x <- c(5,4,1,2)
x[order(x)]
order(res01$padj)
res01 <- as.data.frame(results(dds, alpha = 0.01))
head(res01)
order.inds <- order(res01$padj)
write.csv(res01[ord.inds,], file = "signif01_results.csv")
ord.inds <- order(res01$padj)
write.csv(res01[ord.inds,], file = "signif01_results.csv")
plot(res01$log2FoldChange, -log(res01$padj))
plot(res01$log2FoldChange, -log(res01$padj), ylab="-Log(P-value)", xlab="Log2(FoldChange)")
plot(res01$log2FoldChange, -log(res01$padj), ylab="-Log(P-value)", xlab="Log2(FoldChange)")
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
plot(res01$log2FoldChange, -log(res01$padj), ylab="-Log(P-value)", xlab="Log2(FoldChange)", pch = 20)
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
plot(res01$log2FoldChange, -log(res01$padj), ylab="-Log(P-value)", xlab="Log2(FoldChange) (Drug/Control)", pch = 20)
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
mycols <- rep("gray", nrow(res01))
mycols[ abs(res01$log2FoldChange) > 2 ] <- "red"
inds <- (res01$padj < 0.01) & (abs(res01$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"
plot(res01$log2FoldChange, -log(res01$padj), ylab="-Log(P-value)", xlab="Log2(FoldChange) (Drug/Control)", pch = 20)
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
mycols <- rep("gray", nrow(res01))
mycols[ abs(res01$log2FoldChange) > 2 ] <- "red"
inds <- (res01$padj < 0.01) & (abs(res01$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"
plot(res01$log2FoldChange, -log(res01$padj), ylab="-Log(P-value)",
col = mycols,
xlab="Log2(FoldChange) (Drug/Control)", pch = 20)
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
library("ggplot")
install.packages("ggplot")
library("ggplot")
mycols <- rep("gray", nrow(res01))
mycols[ abs(res01$log2FoldChange) > 2 ] <- "red"
inds <- (res01$padj < 0.01) & (abs(res01$log2FoldChange) > 2 )
mycols[ inds ] <- "darkgreen"
plot(res01$log2FoldChange, -log(res01$padj), ylab="-Log(P-value)",
col = mycols,
xlab="Log2(FoldChange) (Drug/Control)", pch = 20)
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
